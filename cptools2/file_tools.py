"""
file_tools.py - File handling utilities for cptools2

This module extends cptools2 with capabilities for post-processing analysis 
results generated by CellProfiler pipelines. The main functionality involves
automatically joining CSV output files based on patterns specified in the
configuration YAML file.

Key features:
- Automatically combines output files across chunked jobs for each plate
- Supports multiple file patterns (e.g., "Image.csv", "Cells.csv") 
- Creates organized output in a dedicated "joined_files" directory
- Provides detailed logging of the joining process
- Integrates with the cptools2 workflow configuration

These tools are especially useful in high-throughput image analysis workflows
where each plate's data might be spread across multiple output files due to
the chunking process. Rather than manually combining these files after analysis,
this module automates the process based on the original experiment structure.

Usage in YAML configuration:
```
join_files: ["Image.csv", "Cells.csv"]  # Join multiple file types
```
or
```
join_files: "Image.csv"  # Join a single file type
```

If no joining is required, simply omit the join_files parameter.
"""

import os
import glob
import pandas as pd
from cptools2.colours import pretty_print, yellow, purple

def _discover_plates_from_raw_data(raw_data_location):
    """Discover plate names by examining directory structure in raw_data."""
    plate_names = set()
    try:
        # Look for directories like 'plateName_chunkNum' inside raw_data_location
        for item in os.listdir(raw_data_location):
            item_path = os.path.join(raw_data_location, item)
            if os.path.isdir(item_path) and '_' in item:
                plate_name = item.split('_')[0]
                plate_names.add(plate_name)
    except FileNotFoundError:
        pretty_print(f"Warning: Raw data location {raw_data_location} not found during plate discovery.", colour='yellow')
        return []
    if not plate_names:
        pretty_print(f"Warning: No plate directories found in {raw_data_location}. Cannot join files.", colour='yellow')
    return sorted(list(plate_names))

def join_plate_files(plate_store, raw_data_location, patterns=None):
    """
    Join result files for each plate based on specified patterns.
    
    If plate_store is None, attempts to discover plate names from the
    directory structure within raw_data_location.
    
    Parameters:
    -----------
    plate_store : dict or None
        Dictionary of plates from Job.plate_store, or None to discover plates.
    raw_data_location : string
        Path to where raw data (chunked directories like 'plateName_chunkNum') is stored.
    patterns : list or None
        List of file patterns to join (e.g., ["Image.csv", "Cells.csv"])
        If None, no files will be joined.
        
    Returns:
    --------
    Dictionary with joined file information, or None if no patterns.
    """
    if not patterns:
        pretty_print("No file joining patterns specified. Skipping file joining.")
        return None
    
    pretty_print("Joining files with patterns: {}".format(
        ", ".join([yellow(pattern) for pattern in patterns])))
    
    results = {}
    
    # Determine plate names: use plate_store if provided, otherwise discover
    if plate_store:
        plate_names = sorted(plate_store.keys())
        pretty_print(f"Using plate names from provided plate_store: {len(plate_names)}")
    else:
        pretty_print(f"No plate_store provided. Discovering plates from: {raw_data_location}")
        plate_names = _discover_plates_from_raw_data(raw_data_location)
        if not plate_names:
            return None # Stop if no plates were found
        pretty_print(f"Discovered plate names: {', '.join(purple(p) for p in plate_names)}")

    for pattern in patterns:
        pretty_print("Processing pattern: {}".format(yellow(pattern)))
        
        for plate_name in plate_names:
            pretty_print("\tProcessing plate: {}".format(purple(plate_name)))
            
            # Find all files matching the pattern for this plate
            search_pattern = os.path.join(raw_data_location, f"{plate_name}_*", pattern)
            matched_files = glob.glob(search_pattern)
            
            if not matched_files:
                pretty_print(f"\tNo files found for plate {purple(plate_name)} with pattern {yellow(pattern)}")
                continue
                
            try:
                # Combine files
                combined_csv = pd.concat([pd.read_csv(f, low_memory=False) for f in matched_files])
                
                # Save to output location
                # Place joined_files adjacent to raw_data_location
                parent_dir = os.path.dirname(raw_data_location)
                output_dir = os.path.join(parent_dir, "joined_files")
                os.makedirs(output_dir, exist_ok=True)
                output_file = os.path.join(output_dir, f"{plate_name}_{pattern}")
                
                combined_csv.to_csv(output_file, index=False, encoding='utf-8-sig')
                
                # Store output info
                if plate_name not in results:
                    results[plate_name] = {}
                results[plate_name][pattern] = {
                    'output_file': output_file,
                    'rows': len(combined_csv),
                    'files_combined': len(matched_files)
                }
                
                pretty_print(f"\tCreated {yellow(output_file)} with {purple(len(combined_csv))} rows from {purple(len(matched_files))} files")
            except Exception as e:
                pretty_print(f"\tError processing pattern {yellow(pattern)} for plate {purple(plate_name)}: {str(e)}")
    
    return results